services:
  betera-tz:
    build: ./
    env_file:
      - .env
    volumes:
      - ./logs/:/logs/
    ports:
      - ${SERVER_PORT}:${SERVER_PORT}
      - ${METRIC_SERVER_PORT}:${METRIC_SERVER_PORT}
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
      elasticsearch:
        condition: service_healthy
    networks:
      - app-network
    stop_grace_period: 10s
  
  postgres:
    image: postgres:latest
    volumes:
      - .db/postgres/data:/var/lib/postgresql/data
    env_file:
      - .env
    ports:
      - ${POSTGRES_PORT}:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    networks:
      - app-network
    stop_grace_period: 5s

  kafka:
    image: bitnami/kafka:3.5
    ports:
      - ${KAFKA_PORT}:9092
    environment:
      KAFKA_CFG_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - app-network
    restart: unless-stopped
    volumes:
      - .kafka_data:/bitnami/kafka

  elasticsearch:
    image: elasticsearch:9.1.3
    env_file:
      - .env
    ports:
      - ${ELASTICSEARCH_PORT}:9200
    environment:
      - node.name=elasticsearch
      - cluster.name=readmeow-cluster
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health?wait_for_status=green&timeout=60s || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app-network
    volumes:
      - .elasticsearch-data:/usr/share/elasticsearch/data
    stop_grace_period: 5s

  kibana:
    image: kibana:9.1.3
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:5601/api/status || exit 1"]
      interval: 10s
      retries: 30
      start_period: 60s
    ports:
      - ${KIBANA_PORT}:5601
    volumes:
      - .kibana-data:/usr/share/kibana/data
    networks:
      - app-network

  
  logstash:
    image: logstash:9.1.3
    volumes:
      - ./configs/logging/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - app-network

  filebeat:
    image: elastic/filebeat:9.1.3
    depends_on:
      elasticsearch:
        condition: service_healthy
    volumes:
      - ./configs/logging/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./logs/:/logs/
    command: ["filebeat", "-e", "--strict.perms=false"]
    networks:
      - app-network

  prometheus:
    image: prom/prometheus:latest
    env_file:
      - .env
    ports:
      - ${PROMETHEUS_PORT}:9090
    depends_on:
      - betera-tz
    volumes:
      - ./configs/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - .prometheus-data:/prometheus 
    networks:
      - app-network
    stop_grace_period: 5s

  grafana:
    image: grafana/grafana-oss:latest
    ports:
      - ${GRAFANA_PORT}:3000
    env_file:
      - .env
    networks:
      - app-network
    depends_on:
      - prometheus
    volumes:
      - .grafana-data:/var/lib/grafana

  migrate:
    build: ./
    env_file:
      - .env
    volumes:
      - ./internal/migrations:/migrations
    entrypoint: ["goose", "-dir", "/migrations"]
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
    external: false